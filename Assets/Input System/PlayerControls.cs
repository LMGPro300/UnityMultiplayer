//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input System/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""c08bd299-6143-478e-9c53-0f64657c81f3"",
            ""actions"": [
                {
                    ""name"": ""MOVEMENT"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e678e23-7a96-40db-afac-cb916337d480"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MOUSE"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cd0e9dd2-5dc4-468e-83c5-937955d371c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JUMP"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a32a605c-8989-47a0-a871-5addad217b9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PICKUP"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4a55d355-fcca-4dbd-83cc-9d8e9475bc8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TELEPORT"",
                    ""type"": ""Button"",
                    ""id"": ""61a0a612-0a43-45f8-bca9-862164a5f326"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""INVENTORY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b546152e-e4d4-4a7f-a039-c7bdae1a5540"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DROP"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c2701fd9-e178-418f-9aa3-bc154440438f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SHOOT"",
                    ""type"": ""PassThrough"",
                    ""id"": ""37a5c73f-923e-4b94-b792-fe60d9729c5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RELOAD"",
                    ""type"": ""PassThrough"",
                    ""id"": ""26c2f175-d751-4b50-9253-f18057f8d88c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""78fc7a1b-505c-43c3-a5b3-5c7ee391a68d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8063af8e-7816-430e-a075-17730ccd5565"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0daabbbc-b94e-4646-bf9b-5b6d53bd15d7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""48754d91-032d-46cd-a3e1-41138c940f92"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""494a2af8-411c-4e59-b767-79b2acc07980"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOVEMENT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5a085de1-ccfe-4805-94d8-c31f8f0ab946"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOUSE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95a4d750-c3d4-45ef-896e-7719811a1d24"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JUMP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44a5e388-7bb0-425f-b3af-866d4ea20dc6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PICKUP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a2480b11-cec3-404e-8267-aa9d0a365180"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TELEPORT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86fe4c22-ec7e-4979-b1e1-7e11b5f2b005"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""INVENTORY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6074db99-4dc1-4f98-a855-e204c5407c72"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DROP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""053a9c22-8848-4369-b938-4371cfb552a3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SHOOT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c44d82b7-513f-48ae-90ed-6aa8b91723e2"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RELOAD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_MOVEMENT = m_Keyboard.FindAction("MOVEMENT", throwIfNotFound: true);
        m_Keyboard_MOUSE = m_Keyboard.FindAction("MOUSE", throwIfNotFound: true);
        m_Keyboard_JUMP = m_Keyboard.FindAction("JUMP", throwIfNotFound: true);
        m_Keyboard_PICKUP = m_Keyboard.FindAction("PICKUP", throwIfNotFound: true);
        m_Keyboard_TELEPORT = m_Keyboard.FindAction("TELEPORT", throwIfNotFound: true);
        m_Keyboard_INVENTORY = m_Keyboard.FindAction("INVENTORY", throwIfNotFound: true);
        m_Keyboard_DROP = m_Keyboard.FindAction("DROP", throwIfNotFound: true);
        m_Keyboard_SHOOT = m_Keyboard.FindAction("SHOOT", throwIfNotFound: true);
        m_Keyboard_RELOAD = m_Keyboard.FindAction("RELOAD", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_MOVEMENT;
    private readonly InputAction m_Keyboard_MOUSE;
    private readonly InputAction m_Keyboard_JUMP;
    private readonly InputAction m_Keyboard_PICKUP;
    private readonly InputAction m_Keyboard_TELEPORT;
    private readonly InputAction m_Keyboard_INVENTORY;
    private readonly InputAction m_Keyboard_DROP;
    private readonly InputAction m_Keyboard_SHOOT;
    private readonly InputAction m_Keyboard_RELOAD;
    public struct KeyboardActions
    {
        private @PlayerControls m_Wrapper;
        public KeyboardActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MOVEMENT => m_Wrapper.m_Keyboard_MOVEMENT;
        public InputAction @MOUSE => m_Wrapper.m_Keyboard_MOUSE;
        public InputAction @JUMP => m_Wrapper.m_Keyboard_JUMP;
        public InputAction @PICKUP => m_Wrapper.m_Keyboard_PICKUP;
        public InputAction @TELEPORT => m_Wrapper.m_Keyboard_TELEPORT;
        public InputAction @INVENTORY => m_Wrapper.m_Keyboard_INVENTORY;
        public InputAction @DROP => m_Wrapper.m_Keyboard_DROP;
        public InputAction @SHOOT => m_Wrapper.m_Keyboard_SHOOT;
        public InputAction @RELOAD => m_Wrapper.m_Keyboard_RELOAD;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @MOVEMENT.started += instance.OnMOVEMENT;
            @MOVEMENT.performed += instance.OnMOVEMENT;
            @MOVEMENT.canceled += instance.OnMOVEMENT;
            @MOUSE.started += instance.OnMOUSE;
            @MOUSE.performed += instance.OnMOUSE;
            @MOUSE.canceled += instance.OnMOUSE;
            @JUMP.started += instance.OnJUMP;
            @JUMP.performed += instance.OnJUMP;
            @JUMP.canceled += instance.OnJUMP;
            @PICKUP.started += instance.OnPICKUP;
            @PICKUP.performed += instance.OnPICKUP;
            @PICKUP.canceled += instance.OnPICKUP;
            @TELEPORT.started += instance.OnTELEPORT;
            @TELEPORT.performed += instance.OnTELEPORT;
            @TELEPORT.canceled += instance.OnTELEPORT;
            @INVENTORY.started += instance.OnINVENTORY;
            @INVENTORY.performed += instance.OnINVENTORY;
            @INVENTORY.canceled += instance.OnINVENTORY;
            @DROP.started += instance.OnDROP;
            @DROP.performed += instance.OnDROP;
            @DROP.canceled += instance.OnDROP;
            @SHOOT.started += instance.OnSHOOT;
            @SHOOT.performed += instance.OnSHOOT;
            @SHOOT.canceled += instance.OnSHOOT;
            @RELOAD.started += instance.OnRELOAD;
            @RELOAD.performed += instance.OnRELOAD;
            @RELOAD.canceled += instance.OnRELOAD;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @MOVEMENT.started -= instance.OnMOVEMENT;
            @MOVEMENT.performed -= instance.OnMOVEMENT;
            @MOVEMENT.canceled -= instance.OnMOVEMENT;
            @MOUSE.started -= instance.OnMOUSE;
            @MOUSE.performed -= instance.OnMOUSE;
            @MOUSE.canceled -= instance.OnMOUSE;
            @JUMP.started -= instance.OnJUMP;
            @JUMP.performed -= instance.OnJUMP;
            @JUMP.canceled -= instance.OnJUMP;
            @PICKUP.started -= instance.OnPICKUP;
            @PICKUP.performed -= instance.OnPICKUP;
            @PICKUP.canceled -= instance.OnPICKUP;
            @TELEPORT.started -= instance.OnTELEPORT;
            @TELEPORT.performed -= instance.OnTELEPORT;
            @TELEPORT.canceled -= instance.OnTELEPORT;
            @INVENTORY.started -= instance.OnINVENTORY;
            @INVENTORY.performed -= instance.OnINVENTORY;
            @INVENTORY.canceled -= instance.OnINVENTORY;
            @DROP.started -= instance.OnDROP;
            @DROP.performed -= instance.OnDROP;
            @DROP.canceled -= instance.OnDROP;
            @SHOOT.started -= instance.OnSHOOT;
            @SHOOT.performed -= instance.OnSHOOT;
            @SHOOT.canceled -= instance.OnSHOOT;
            @RELOAD.started -= instance.OnRELOAD;
            @RELOAD.performed -= instance.OnRELOAD;
            @RELOAD.canceled -= instance.OnRELOAD;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IKeyboardActions
    {
        void OnMOVEMENT(InputAction.CallbackContext context);
        void OnMOUSE(InputAction.CallbackContext context);
        void OnJUMP(InputAction.CallbackContext context);
        void OnPICKUP(InputAction.CallbackContext context);
        void OnTELEPORT(InputAction.CallbackContext context);
        void OnINVENTORY(InputAction.CallbackContext context);
        void OnDROP(InputAction.CallbackContext context);
        void OnSHOOT(InputAction.CallbackContext context);
        void OnRELOAD(InputAction.CallbackContext context);
    }
}
